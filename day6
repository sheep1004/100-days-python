字符串和常用数据结构
1.使用字符串：
  a.在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。
  b.可以在字符串中使用\（反斜杠）来表示转义，例如：\n不是代表反斜杠和字符n，而是表示换行；而\t也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示'要写成\'，同理想表示\要写成\\。
      s1 = '\'hello, world!\'' 
      #'hello, world!' 
      s2 = '\n\\hello, world!\\\n' 
      #\hello, world!\

      print(s1, s2, end='')
    在\后面还可以跟一个八进制或者十六进制数来表示字符，例如\141和\x61都代表小写字母a，前者是八进制的表示法，后者是十六进制的表示法。也可以在\后面跟Unicode字符编码来表示字符。
      s1 = '\141\142\143\x61\x62\x63'
      s2 = '\u9a86\u660a'
      print(s1, s2)   
      #abcabc 骆昊
    如果不希望字符串中的\表示转义，我们可以通过在字符串的最前面加上字母r来加以说明。
      s1 = r'\'hello, world!\''
      s2 = r'\n\\hello, world!\\\n'
      print(s1, s2, end='')  
      #\'hello, world!\' \n\\hello, world!\\\n
  c.可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，可以使用in和not in来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符（切片运算）。
      s1 = 'hello ' * 3
      print(s1) # hello hello hello 
      s2 = 'world'
      s1 += s2
      print(s1) # hello hello hello world
      print('ll' in s1) # True
      print('good' in s1) # False
      str2 = 'abc123456'
      # 从字符串中取出指定位置的字符(下标运算)
      print(str2[2]) # c
      # 字符串切片(从指定的开始索引到指定的结束索引)
      print(str2[2:5]) # c12
      print(str2[2:]) # c123456
      print(str2[2::2]) # c246
      print(str2[::2]) # ac246
      print(str2[::-1]) # 654321cba
      print(str2[-3:-1]) # 45  （远离0的最后一位数取不到）
  d.字符串相关函数的使用：
      str1 = 'hello, world!'
      # 通过内置函数len计算字符串的长度
      print(len(str1)) # 13
      # 获得字符串首字母大写的拷贝
      print(str1.capitalize()) # Hello, world!
      # 获得字符串每个单词首字母大写的拷贝
      print(str1.title()) # Hello, World!
      # 获得字符串变大写后的拷贝
      print(str1.upper()) # HELLO, WORLD!
      # 从字符串中查找子串所在位置
      print(str1.find('or')) # 8
      print(str1.find('shit')) # -1
      # 与find类似但找不到子串时会引发异常
      # print(str1.index('or'))
      # print(str1.index('shit'))
      # 检查字符串是否以指定的字符串开头
      print(str1.startswith('He')) # False
      print(str1.startswith('hel')) # True
      # 检查字符串是否以指定的字符串结尾
      print(str1.endswith('!')) # True
      # 将字符串以指定的宽度居中并在两侧填充指定的字符
      print(str1.center(50, '*'))
      # 将字符串以指定的宽度靠右放置左侧填充指定的字符
      print(str1.rjust(50, ' '))
      str2 = 'abc123456'
      # 检查字符串是否由数字构成
      print(str2.isdigit())  # False
      # 检查字符串是否以字母构成
      print(str2.isalpha())  # False
      # 检查字符串是否以数字和字母构成
      print(str2.isalnum())  # True
      str3 = '  jackfrued@126.com '
      print(str3)
      # 获得字符串修剪左右两侧空格之后的拷贝
      print(str3.strip())
  e.可以用下面的方式来格式化输出字符串:
       a, b = 5, 10
       print('%d * %d = %d' % (a, b, a * b))
    当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示:
       a, b = 5, 10
       print('{0} * {1} = {2}'.format(a, b, a * b))
    Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母f，我们可以使用下面的语法糖来简化上面的代码:
       a, b = 5, 10
       print(f'{a} * {b} = {a * b}')
2.使用列表：
  a.数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。
    接下来我们要介绍的列表（list），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在[]中，多个元素用,进行分隔，
    可以使用for循环对列表元素进行遍历，也可以使用[]或[:]运算符取出列表中的一个或多个元素。






